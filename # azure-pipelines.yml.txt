# azure-pipelines.yml
trigger:
  branches:
    include:
      - develop
      - feature/*
pr:
  branches:
    include:
      - develop
      - feature/*

stages:
- stage: Build
  displayName: Build & Test
  jobs:
  - job: BuildJob
    displayName: Build job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '18.x'
      - script: npm ci
        displayName: 'npm ci'
      - script: npm test
        displayName: 'Run unit tests'
      - script: npm run build
        displayName: 'Build (placeholder)'
      - script: bash ./scripts/create_artifact.sh
        displayName: 'Create artifact ZIP'
      - publish: $(System.DefaultWorkingDirectory)/dist
        artifact: drop
        displayName: 'Publish artifact (drop)'

- stage: Deploy_Dev
  displayName: Deploy to Dev
  dependsOn: Build
  jobs:
  - deployment: DeployToDev
    displayName: Deploy -> Dev
    environment: 'dev'          # <--- environment name, configure approvals in UI
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: drop
            - script: |
                ARTIFACT=$(System.DefaultWorkingDirectory)/drop/app.zip
                bash ./scripts/deploy_to_env.sh dev "$ARTIFACT"
              displayName: 'Deploy artifact to Dev (placeholder)'

- stage: Deploy_QA
  displayName: Deploy to QA
  dependsOn: Deploy_Dev
  condition: succeeded()
  jobs:
  - deployment: DeployToQA
    displayName: Deploy -> QA
    environment: 'qa'           # <--- environment name
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        preDeploy:
          steps:
            - script: echo "Pre-deploy QA checks"
        deploy:
          steps:
            - download: current
              artifact: drop
            - script: |
                ARTIFACT=$(System.DefaultWorkingDirectory)/drop/app.zip
                bash ./scripts/deploy_to_env.sh qa "$ARTIFACT"
              displayName: 'Deploy artifact to QA (placeholder)'

- stage: Deploy_Prod
  displayName: Deploy to Production
  dependsOn: Deploy_QA
  condition: succeeded()
  jobs:
  - deployment: DeployToProd
    displayName: Deploy -> Prod
    environment: 'prod'         # <--- environment name
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              artifact: drop
            - script: |
                ARTIFACT=$(System.DefaultWorkingDirectory)/drop/app.zip
                bash ./scripts/deploy_to_env.sh prod "$ARTIFACT"
              displayName: 'Deploy artifact to Production (placeholder)'
